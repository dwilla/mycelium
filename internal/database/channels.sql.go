// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: channels.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (id, name, creator)
VALUES (
    gen_random_uuid(),
    $1,
    $2
) RETURNING id, name, creator, created_at, updated_at
`

type CreateChannelParams struct {
	Name    string
	Creator uuid.UUID
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel, arg.Name, arg.Creator)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Creator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelByID = `-- name: GetChannelByID :one
SELECT id, name, creator, created_at, updated_at FROM channels 
WHERE id = $1
`

func (q *Queries) GetChannelByID(ctx context.Context, id uuid.UUID) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByID, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Creator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelByName = `-- name: GetChannelByName :one
SELECT id, name, creator, created_at, updated_at FROM channels
WHERE name SIMILAR TO $1
`

func (q *Queries) GetChannelByName(ctx context.Context, similarToEscape string) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByName, similarToEscape)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Creator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannels = `-- name: GetChannels :many
SELECT id, name, creator, created_at, updated_at FROM channels
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Creator,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
