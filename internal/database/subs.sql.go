// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getChannelsForUser = `-- name: GetChannelsForUser :many
SELECT channels.id, channels.name FROM subs
INNER JOIN channels ON subs.channel_id = channels.id
WHERE subs.user_id = $1
`

type GetChannelsForUserRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetChannelsForUser(ctx context.Context, userID uuid.UUID) ([]GetChannelsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getChannelsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChannelsForUserRow
	for rows.Next() {
		var i GetChannelsForUserRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersForChannel = `-- name: GetUsersForChannel :many
SELECT users.id, users.username FROM subs
INNER JOIN users ON subs.user_id = users.id
WHERE subs.channel_id = $1
`

type GetUsersForChannelRow struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) GetUsersForChannel(ctx context.Context, channelID uuid.UUID) ([]GetUsersForChannelRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersForChannel, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersForChannelRow
	for rows.Next() {
		var i GetUsersForChannelRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
